def calc_redundant_bits(m):
    r = 0
    while (2 ** r) < (m + r + 1):
        r += 1
    return r

def pos_redundant_bits(data, r):
    j = 0
    k = 1
    m = len(data)
    res = ''
    for i in range(1, m + r + 1):
        if i == 2 ** j:
            res = res + '0'
            j += 1
        else:
            res = res + data[-1 * k]
            k += 1
    return res[::-1]

def calc_parity_bits(arr, r):
    n = len(arr)
    for i in range(r):
        val = 0
        for j in range(1, n + 1):
            if j & (2 ** i) == (2 ** i):
                val ^= int(arr[-1 * j])
        arr = arr[:n - (2 ** i)] + str(val) + arr[n - (2 ** i) + 1:]
    return arr

def detect_error(arr, nr):
    n = len(arr)
    res = 0
    for i in range(nr):
        val = 0
        for j in range(1, n + 1):
            if j & (2 ** i) == (2 ** i):
                val ^= int(arr[-1 * j])
        res += val * (10 ** i)
    return int(str(res), 2)

# Example
data = "1011"
m = len(data)
r = calc_redundant_bits(m)
arr = pos_redundant_bits(data, r)
arr = calc_parity_bits(arr, r)
print("Hamming code:", arr)

# Introduce error at position 3
arr_err = list(arr)
arr_err[-3] = '1' if arr_err[-3] == '0' else '0'
arr_err = ''.join(arr_err)
print("Received code with error:", arr_err)
corrupted_bit = detect_error(arr_err, r)
print(f"Error detected at bit position: {corrupted_bit}")
